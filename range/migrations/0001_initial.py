# Generated by Django 2.2 on 2020-06-02 17:16

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CBCRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sex', models.CharField(choices=[('male', 'Мужской'), ('female', 'Женский')], default='', max_length=50, null=True, verbose_name='Пол')),
                ('age_min', models.IntegerField(verbose_name='Возраст')),
                ('age_max', models.IntegerField(verbose_name='')),
                ('leukocyte_min', models.FloatField(verbose_name='Лейкоциты')),
                ('leukocyte_max', models.FloatField(verbose_name='')),
                ('erythrocyte_min', models.FloatField(verbose_name='Эритроциты')),
                ('erythrocyte_max', models.FloatField(verbose_name='')),
                ('hemoglobin_min', models.IntegerField(verbose_name='Гемоглобин')),
                ('hemoglobin_max', models.IntegerField(verbose_name='')),
                ('hematocrit_min', models.FloatField(verbose_name='Гематокрит')),
                ('hematocrit_max', models.FloatField(verbose_name='')),
                ('sed_rate_min', models.IntegerField(verbose_name='СОЭ')),
                ('sed_rate_max', models.IntegerField(verbose_name='')),
            ],
            options={
                'verbose_name': 'Общий анализ крови',
                'verbose_name_plural': 'Общий анализ крови',
                'unique_together': {('sex', 'age_min', 'age_max')},
            },
        ),
        migrations.CreateModel(
            name='DiffRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_min', models.CharField(max_length=20, verbose_name='Возраст')),
                ('age_max', models.CharField(max_length=20, verbose_name='')),
                ('value_type', models.CharField(choices=[('relative', 'Относительное'), ('absolute', 'Абсолютное')], default='relative', max_length=50, verbose_name='Тип значения результатов')),
                ('promyelocyte_min', models.FloatField(verbose_name='Промиелоциты')),
                ('promyelocyte_max', models.FloatField(verbose_name='')),
                ('myelocyte_min', models.FloatField(verbose_name='Миелоциты')),
                ('myelocyte_max', models.FloatField(verbose_name='')),
                ('metamyelocyte_min', models.FloatField(verbose_name='Метамиелоциты')),
                ('metamyelocyte_max', models.FloatField(verbose_name='')),
                ('neutrophil_min', models.FloatField(verbose_name='Нейтрофилы')),
                ('neutrophil_max', models.FloatField(verbose_name='')),
                ('banded_neutrophil_min', models.FloatField(verbose_name='Палочкоядерные нейтрофилы')),
                ('banded_neutrophil_max', models.FloatField(verbose_name='')),
                ('segmented_neutrophil_min', models.FloatField(verbose_name='Сегментоядерные нейтрофилы')),
                ('segmented_neutrophil_max', models.FloatField(verbose_name='')),
                ('lymphocyte_min', models.FloatField(verbose_name='Лимфоциты')),
                ('lymphocyte_max', models.FloatField(verbose_name='')),
                ('monocyte_min', models.FloatField(verbose_name='Моноциты')),
                ('monocyte_max', models.FloatField(verbose_name='')),
                ('eosinophil_min', models.FloatField(verbose_name='Эозинофилы')),
                ('eosinophil_max', models.FloatField(verbose_name='')),
                ('basophil_min', models.FloatField(verbose_name='Базофилы')),
                ('basophil_max', models.FloatField(verbose_name='')),
                ('plasma_cell_min', models.FloatField(verbose_name='Плазмациты')),
                ('plasma_cell_max', models.FloatField(verbose_name='')),
            ],
            options={
                'verbose_name': 'Лейкоцитарная формула',
                'verbose_name_plural': 'Лейкоцитарная формула',
                'unique_together': {('age_min', 'age_max', 'value_type')},
            },
        ),
        migrations.CreateModel(
            name='IndexRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intoxicationKK_min', models.FloatField(verbose_name='Лейкоцитарный индекс интоксикации Я.Я. Кальф-Калифа')),
                ('intoxicationO_max', models.FloatField(verbose_name='')),
                ('intoxicationO_min', models.FloatField(verbose_name='Лейкоцитарный индекс интоксикации В. К. Островского')),
                ('intoxicationKK_max', models.FloatField(verbose_name='')),
                ('nuclear_min', models.FloatField(verbose_name='Ядерный индекс степени эндотоксикоза Г.Д. Даштаянца')),
                ('nuclear_max', models.FloatField(verbose_name='')),
                ('shift_min', models.FloatField(verbose_name='Индекс сдвига лейкоцитов Н. И. Ябучинского')),
                ('shift_max', models.FloatField(verbose_name='')),
                ('allergy_min', models.FloatField(verbose_name='Индекс аллергизации')),
                ('allergy_max', models.FloatField(verbose_name='')),
            ],
            options={
                'verbose_name': 'Лейкоцитарные индексы',
                'verbose_name_plural': 'Лейкоцитарные индексы',
            },
        ),
        migrations.CreateModel(
            name='ReferenceRange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cbc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='range.CBCRange', verbose_name='Общий анализ крови')),
                ('diff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='range.DiffRange', verbose_name='Лейкоцитарная формула')),
            ],
            options={
                'verbose_name': 'Референтные значения',
                'verbose_name_plural': 'Референтные значения',
                'unique_together': {('cbc', 'diff')},
            },
        ),
    ]
